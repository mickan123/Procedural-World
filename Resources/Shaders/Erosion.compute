#pragma kernel HydraulicErosion

#define LDIR(col) (col.r)
#define RDIR(col) (col.g)
#define TDIR(col) (col.b)
#define BDIR(col) (col.a)

#define TERRAIN_HEIGHT(col) (col.r)
#define WATER_HEIGHT(col) (col.g)
#define SEDIMENT(col) (col.b)
#define HARDNESS(col) (col.a)
#define FULL_HEIGHT(col) (TERRAIN_HEIGHT(col) + WATER_HEIGHT(col))

#define CURRENT_SAMPLE(tex) (tex[index])

#define SUM_COMPS(v) ((v.r + v.g + v.b + v.a))

#define IS_LEFT_BORDER (index % width < 1)
#define IS_RIGHT_BORDER (index % width > width - 2)
#define IS_TOP_BORDER (uint(uint(index) / uint(width)) < 1)
#define IS_BOTTOM_BORDER (uint(uint(index) / uint(width)) > uint(width) - 2)

#define PIPEAREA 60

// Heightmap, r = height, g = water height, b = sediment, r = placeholder
RWStructuredBuffer<float4> HeightMap;

// Water flux field, r = left, g = right, b = top, a = bottom
RWStructuredBuffer<float4> FluxMap;

// Thermal flux field, r = left, g = right, b = top, a = bottom
RWStructuredBuffer<float4> ThermalFluxMap;

// Velocity field, r = x, g = y
RWStructuredBuffer<float2> VelocityMap;

RWStructuredBuffer<float> InitialHeightMap;

uint width;
float timestep;
float rainRate;
float evaporateSpeed;
float gravity;
float sedimentCapacityFactor;
float sedimentDisolveFactor;
float sedimentDepositFactor;
float thermalErosionRate;
float talusAngleTangentBias;
float talusAngleCoeff;
float sedimentSofteningFactor;
float maxErosionDepth;

int numIterations;

float4 SampleBilinear(RWStructuredBuffer<float4> buff, float2 uv)
{
	float2 uva = floor(uv);
	float2 uvb = ceil(uv);

	uint2 id00 = (uint2)uva;  // 0 0
	uint2 id10 = uint2(uvb.x, uva.y); // 1 0
	uint2 id01 = uint2(uva.x, uvb.y); // 0 1	
	uint2 id11 = (uint2)uvb; // 1 1

	float2 d = uv - uva;

	return
		buff[id00.x + id00.y * width] * (1 - d.x) * (1 - d.y) +
		buff[id10.x + id10.y * width] * d.x * (1 - d.y) +
		buff[id01.x + id01.y * width] * (1 - d.x) * d.y +
		buff[id11.x + id11.y * width] * d.x * d.y;
}

// Step 1: Simulate rain 
void WaterIncrease(int index)
{
    float4 state = CURRENT_SAMPLE(HeightMap);

    WATER_HEIGHT(state) +=  rainRate;

    CURRENT_SAMPLE(HeightMap) = state;
}


// Step 2: Flux field computation
void FluxComputation(int index)
{
    float4 state = CURRENT_SAMPLE(HeightMap);
    float4 stateLeft = IS_LEFT_BORDER ? state : HeightMap[index - 1];
	float4 stateRight = IS_RIGHT_BORDER ? state : HeightMap[index + 1];
	float4 stateTop = IS_TOP_BORDER ? state : HeightMap[index - width];
	float4 stateBottom = IS_BOTTOM_BORDER ? state : HeightMap[index + width];

    float terrainHeight = TERRAIN_HEIGHT(state);
	float waterHeight = WATER_HEIGHT(state);

    float4 outputFlux = CURRENT_SAMPLE(FluxMap);

    float4 deltaHeight = FULL_HEIGHT(state) - float4(
        FULL_HEIGHT(stateLeft),
        FULL_HEIGHT(stateRight),
        FULL_HEIGHT(stateTop),
        FULL_HEIGHT(stateBottom)
    );

    float pipeArea = 60;
    outputFlux = max(0, outputFlux + deltaHeight * (timestep * gravity * PIPEAREA));
    
    // Rescale flux to not exceed total amount of water in a cell
    float sumOutputFlux = SUM_COMPS(outputFlux);
    if (sumOutputFlux != 0)
    {
        outputFlux *= min(1, waterHeight / (SUM_COMPS(outputFlux) * timestep)) ;
    }

    if (IS_LEFT_BORDER) LDIR(outputFlux) = 0;
    if (IS_RIGHT_BORDER) RDIR(outputFlux) = 0;
    if (IS_TOP_BORDER) TDIR(outputFlux) = 0;
    if (IS_BOTTOM_BORDER) BDIR(outputFlux) = 0;

    // Write sample
    CURRENT_SAMPLE(FluxMap) = max(0, outputFlux);
}

// Step 3: Apply flux to update velocity and change water heights
void VelocityComputation(int index)
{
    float4 state = CURRENT_SAMPLE(HeightMap);
	float4 outputFlux = CURRENT_SAMPLE(FluxMap);
	float4 inputFlux = float4(
		RDIR(FluxMap[index - 1]),
		LDIR(FluxMap[index + 1]),
		BDIR(FluxMap[index - width]),
		TDIR(FluxMap[index + width])
    );
	float waterHeightBefore = WATER_HEIGHT(state);

	// Water surface and velocity field update
	// volume is changing by amount on incoming fluid volume minus outgoing
	float volumeDelta = timestep * (SUM_COMPS(inputFlux) - SUM_COMPS(outputFlux));	

	// Then, we update the water height in the current (x, y) cell:
	WATER_HEIGHT(state) += volumeDelta;

	// Write new state to the HeightMap
	CURRENT_SAMPLE(HeightMap) = state;

	// Compute new velocity from flux to the VelocityMap
    CURRENT_SAMPLE(VelocityMap) = float2(
        0.5 * (LDIR(inputFlux) - LDIR(outputFlux) + RDIR(outputFlux) - RDIR(inputFlux)),
        0.5 * (BDIR(inputFlux) - BDIR(outputFlux) + TDIR(outputFlux) - TDIR(inputFlux))
    );
}

// Step 4: Erode and deposit sediment and update hardness
void ErosionDeposition(int index)
{
    // Sample the heighmap
	float4 state = CURRENT_SAMPLE(HeightMap);
	float4 stateLeft = IS_LEFT_BORDER ? state : HeightMap[index - 1];
	float4 stateRight = IS_RIGHT_BORDER ? state : HeightMap[index + 1];
	float4 stateTop = IS_TOP_BORDER ? state : HeightMap[index - width];
	float4 stateBottom = IS_BOTTOM_BORDER ? state : HeightMap[index + width];
	float2 velocity = CURRENT_SAMPLE(VelocityMap);

	// Tilt angle computation
	float3 dhdx = float3(2, TERRAIN_HEIGHT(stateRight) - TERRAIN_HEIGHT(stateLeft), 0);
	float3 dhdy = float3(0, TERRAIN_HEIGHT(stateTop) - TERRAIN_HEIGHT(stateBottom), 2);
	float3 normal = cross(dhdx, dhdy);

	float sinTiltAngle = abs(normal.y) / length(normal);

    float deltaHeight = CURRENT_SAMPLE(InitialHeightMap) - TERRAIN_HEIGHT(state);
    float maxErosionMultiplier = 1 - max(0, deltaHeight) / maxErosionDepth;
    maxErosionMultiplier = 1;

    float sedimentCapacity = sedimentCapacityFactor * length(velocity) * min(sinTiltAngle, 0.05) * maxErosionMultiplier;

    // Take sediment from soil if we haven't filled up capacity
    if (SEDIMENT(state) < sedimentCapacity)
    {
        float deltaSediment = timestep * sedimentDisolveFactor * HARDNESS(state) * (sedimentCapacity - SEDIMENT(state));
        TERRAIN_HEIGHT(state) -= deltaSediment;
        WATER_HEIGHT(state) += deltaSediment;
		SEDIMENT(state) += deltaSediment;
    }
    else // Deposit sediment if we are over capacity
    {
        float deltaSediment = timestep * sedimentDepositFactor * (SEDIMENT(state) - sedimentCapacity);
        TERRAIN_HEIGHT(state) += deltaSediment;
        WATER_HEIGHT(state) -= deltaSediment;
		SEDIMENT(state) -= deltaSediment;
    }

    // Water evaporation.
	WATER_HEIGHT(state) *= (1 - evaporateSpeed) * timestep;

    // Hardness update
    HARDNESS(state) = HARDNESS(state) - timestep * sedimentSofteningFactor * sedimentDisolveFactor * (SEDIMENT(state) - sedimentCapacity);
	HARDNESS(state) = clamp(HARDNESS(state), 0.1, 1);
    
    // Write sample
    CURRENT_SAMPLE(HeightMap) = state;
}

// Step 5. Transportation of sediment
void SedimentTransportation(int index)
{
    float4 state = CURRENT_SAMPLE(HeightMap);
    float2 velocity = CURRENT_SAMPLE(VelocityMap);

    float2 pos = float2(
        int(index % width),
        int(index / width)
    );

    SEDIMENT(state) = SEDIMENT(SampleBilinear(HeightMap, pos + velocity * timestep));

    CURRENT_SAMPLE(HeightMap) = state;
}

// Step 6. Calculate Thermal Flux
void ThermalFluxComputation(int index)
{
    float4 state = CURRENT_SAMPLE(HeightMap);
    float4 stateLeft = IS_LEFT_BORDER ? state : HeightMap[index - 1];
	float4 stateRight = IS_RIGHT_BORDER ? state : HeightMap[index + 1];
	float4 stateTop = IS_TOP_BORDER ? state : HeightMap[index - width];
	float4 stateBottom = IS_BOTTOM_BORDER ? state : HeightMap[index + width];

    // Calculate neighbour heights
    float4 neighborHeights = float4(
		TERRAIN_HEIGHT(stateLeft),
		TERRAIN_HEIGHT(stateRight),
		TERRAIN_HEIGHT(stateTop),
		TERRAIN_HEIGHT(stateBottom)
	);

    // Calculate max height difference
    float4 deltaHeight = max(0, TERRAIN_HEIGHT(state) - neighborHeights);
    float maxHeightDifference = max(
        max(deltaHeight.x, deltaHeight.y),
        max(deltaHeight.z, deltaHeight.w)
    );

    float deltaVolume = thermalErosionRate * HARDNESS(state) * maxHeightDifference * 0.5;

    // Calculate threshold angle to determine if mass falls in that direction
    float threshold = HARDNESS(state) * talusAngleCoeff + talusAngleTangentBias;

    // Calculate how much mass is transferred in each direction
    float4 tanAngle = deltaHeight;
    float4 k = 0;

    if (tanAngle.x > threshold)
        k.x = deltaHeight.x;
    if (tanAngle.y > threshold)
        k.y = deltaHeight.y;
    if (tanAngle.z > threshold)
        k.z = deltaHeight.z;
    if (tanAngle.w > threshold)
        k.w = deltaHeight.w;

    float sumProportions = SUM_COMPS(k);
    float4 outputFlux = 0;

    if (sumProportions > 0)
        outputFlux = deltaVolume * k / sumProportions;

    if (IS_LEFT_BORDER) LDIR(outputFlux) = 0;
	if (IS_BOTTOM_BORDER) BDIR(outputFlux) = 0;
	if (IS_RIGHT_BORDER) RDIR(outputFlux) = 0;
	if (IS_TOP_BORDER) TDIR(outputFlux) = 0;

    CURRENT_SAMPLE(ThermalFluxMap) = outputFlux;
}

// Step 7. Apply thermal erosion based on thermal flux
void ApplyThermalErosion(int index)
{
    float4 state = CURRENT_SAMPLE(HeightMap);
    float4 outputFlux = CURRENT_SAMPLE(ThermalFluxMap);
    float4 stateLeft = IS_LEFT_BORDER ? outputFlux : ThermalFluxMap[index - 1];
	float4 stateRight = IS_RIGHT_BORDER ? outputFlux : ThermalFluxMap[index + 1];
	float4 stateTop = IS_TOP_BORDER ? outputFlux : ThermalFluxMap[index - width];
	float4 stateBottom = IS_BOTTOM_BORDER ? outputFlux : ThermalFluxMap[index + width];

    float4 inputFlux = float4(
        RDIR(stateLeft),
		LDIR(stateRight),
		BDIR(stateTop),
		TDIR(stateBottom)
    );

    // Calculate change in volume based on incoming flux minus outgoing flux
    float deltaVolume = SUM_COMPS(inputFlux) - SUM_COMPS(outputFlux);

    TERRAIN_HEIGHT(state) += timestep * deltaVolume * thermalErosionRate;

    CURRENT_SAMPLE(HeightMap) = state;
}

[numthreads(8, 8, 1)]
void HydraulicErosion(uint3 tid : SV_DispatchThreadID)
{   
    uint index = tid.y * width + tid.x;

    for (int i = 0; i < numIterations; i++) {
        WaterIncrease(index);
        FluxComputation(index);
        VelocityComputation(index);
        ErosionDeposition(index);
        SedimentTransportation(index);
        ThermalFluxComputation(index);
        ApplyThermalErosion(index);
    }
}